pub enum Opcode {
  AND(AddressingMode),
  ASL(AddressingMode),
  BCC,
  BCS,
  BEQ,
  BIT(AddressingMode),
  BMI,
  BNE,
  BPL,
  BRK,
  BVC,
  BVS,
  CLC,
  CLD,
  CLI,
  CLV,
  CMP(AddressingMode),
  CPX(AddressingMode),
  CPY(AddressingMode),
  INX,
  LDA(AddressingMode),
  STA(AddressingMode),
  TAX,
}

impl From<u8> for Opcode {
  fn from(value: u8) -> Self {
    match value {
      0x29 => Opcode::AND(AddressingMode::Immediate),
      0x25 => Opcode::AND(AddressingMode::ZeroPage),
      0x35 => Opcode::AND(AddressingMode::ZeroPageX),
      0x2D => Opcode::AND(AddressingMode::Absolute),
      0x3D => Opcode::AND(AddressingMode::AbsoluteX),
      0x39 => Opcode::AND(AddressingMode::AbsoluteY),
      0x21 => Opcode::AND(AddressingMode::IndirectX),
      0x31 => Opcode::AND(AddressingMode::IndirectY),
      0x0A => Opcode::ASL(AddressingMode::Accumulator),
      0x06 => Opcode::ASL(AddressingMode::ZeroPage),
      0x16 => Opcode::ASL(AddressingMode::ZeroPageX),
      0x0E => Opcode::ASL(AddressingMode::Absolute),
      0x1E => Opcode::ASL(AddressingMode::AbsoluteX),
      0x90 => Opcode::BCC,
      0xB0 => Opcode::BCS,
      0xF0 => Opcode::BEQ,
      0x24 => Opcode::BIT(AddressingMode::ZeroPage),
      0x2C => Opcode::BIT(AddressingMode::Absolute),
      0x30 => Opcode::BMI,
      0xD0 => Opcode::BNE,
      0x10 => Opcode::BPL,
      0x00 => Opcode::BRK,
      0x50 => Opcode::BVC,
      0x70 => Opcode::BVS,
      0x18 => Opcode::CLC,
      0xD8 => Opcode::CLD,
      0x58 => Opcode::CLI,
      0xB8 => Opcode::CLV,
      0xC9 => Opcode::CMP(AddressingMode::Immediate),
      0xC5 => Opcode::CMP(AddressingMode::ZeroPage),
      0xD5 => Opcode::CMP(AddressingMode::ZeroPageX),
      0xCD => Opcode::CMP(AddressingMode::Absolute),
      0xDD => Opcode::CMP(AddressingMode::AbsoluteX),
      0xD9 => Opcode::CMP(AddressingMode::AbsoluteY),
      0xC1 => Opcode::CMP(AddressingMode::IndirectX),
      0xD1 => Opcode::CMP(AddressingMode::IndirectY),
      0xE0 => Opcode::CPX(AddressingMode::Immediate),
      0xE4 => Opcode::CPX(AddressingMode::ZeroPage),
      0xEC => Opcode::CPX(AddressingMode::Absolute),
      0xC0 => Opcode::CPY(AddressingMode::Immediate),
      0xC4 => Opcode::CPY(AddressingMode::ZeroPage),
      0xCC => Opcode::CPY(AddressingMode::Absolute),
      0xE8 => Opcode::INX,
      0xA9 => Opcode::LDA(AddressingMode::Immediate),
      0xA5 => Opcode::LDA(AddressingMode::ZeroPage),
      0xB5 => Opcode::LDA(AddressingMode::ZeroPageX),
      0xAD => Opcode::LDA(AddressingMode::Absolute),
      0xBD => Opcode::LDA(AddressingMode::AbsoluteX),
      0xB9 => Opcode::LDA(AddressingMode::AbsoluteY),
      0xA1 => Opcode::LDA(AddressingMode::IndirectX),
      0xB1 => Opcode::LDA(AddressingMode::IndirectY),
      0x85 => Opcode::STA(AddressingMode::ZeroPage),
      0x95 => Opcode::STA(AddressingMode::ZeroPageX),
      0x8D => Opcode::STA(AddressingMode::Absolute),
      0x9D => Opcode::STA(AddressingMode::AbsoluteX),
      0x99 => Opcode::STA(AddressingMode::AbsoluteY),
      0x81 => Opcode::STA(AddressingMode::IndirectX),
      0x91 => Opcode::STA(AddressingMode::IndirectY),
      0xAA => Opcode::TAX,
      _ => panic!("Unknown opcode: {:#X}", value),
    }
  }
}

pub enum AddressingMode {
  Accumulator,
  Immediate,
  ZeroPage,
  ZeroPageX,
  ZeroPageY,
  Absolute,
  AbsoluteX,
  AbsoluteY,
  IndirectX,
  IndirectY,
}

impl AddressingMode {
  pub fn len(&self) -> u16 {
    match self {
      AddressingMode::Accumulator => 0,
      AddressingMode::Immediate => 1,
      AddressingMode::ZeroPage => 1,
      AddressingMode::ZeroPageX => 1,
      AddressingMode::ZeroPageY => 1,
      AddressingMode::Absolute => 2,
      AddressingMode::AbsoluteX => 2,
      AddressingMode::AbsoluteY => 2,
      AddressingMode::IndirectX => 1,
      AddressingMode::IndirectY => 1,
    }
  }
}
